<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://damonsj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://damonsj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-22T13:53:48+00:00</updated><id>https://damonsj.github.io/feed.xml</id><title type="html">Invisible Cities</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">c++中的 mutable关键字</title><link href="https://damonsj.github.io/programming/2025/03/15/mutable-keyword.html" rel="alternate" type="text/html" title="c++中的 mutable关键字"/><published>2025-03-15T17:10:00+00:00</published><updated>2025-03-15T17:10:00+00:00</updated><id>https://damonsj.github.io/programming/2025/03/15/mutable-keyword</id><content type="html" xml:base="https://damonsj.github.io/programming/2025/03/15/mutable-keyword.html"><![CDATA[<p>mutable 是用来修饰一个 const 示例的部分可变的数据成员的。如果要说得更清晰一点，就是说 mutable 的出现，将 C++ 中的 const 的概念<label for="One" class="margin-toggle sidenote-number"></label><input type="checkbox" id="One" class="margin-toggle"/><span class="sidenote">See <a href="https://en.cppreference.com/w/cpp/language/cv">cppreference cv</a> </span> 分成了两种：</p> <ul> <li> <p>二进制层面的 const，也就是「绝对的」常量，在任何情况下都不可修改(除非用 const_cast)</p> </li> <li> <p>引入 mutable 之后，C++ 可以有逻辑层面的 const，也就是对一个常量实例来说，从外部观察，它是常量而不可修改；但是内部可以有非常量的状态。当然，所谓的「逻辑 const」，在 C++ 标准中并没有这一称呼。这只是为了方便理解，而创造出来的名词。</p> </li> </ul> <p>显而易见，mutable 只能用来修饰类的数据成员；而被 mutable 修饰的数据成员，可以在 const 成员函数中修改。</p> <p>比如：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HashTable</span> <span class="p">{</span>
 <span class="nl">public:</span>
    <span class="c1">//...</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">lookup</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">last_key_</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">last_value_</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value</span><span class="p">{</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">lookupInternal</span><span class="p">(</span><span class="n">key</span><span class="p">)};</span>

        <span class="n">last_key_</span>   <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
        <span class="n">last_value_</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
    <span class="p">}</span>

 <span class="k">private</span><span class="o">:</span>
    <span class="k">mutable</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">last_key_</span>
    <span class="k">mutable</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">last_value_</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div> <p>lookup 函数是const 的函数，正常来说是不能修改成员变量的，但是加上mutable之后，就可以修改了。</p> <p>更实际的例子是用在锁上面。比如：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Queue</span> <span class="p">{</span>
 <span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">push</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">);</span>
    <span class="kt">bool</span> <span class="n">empty</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
<span class="p">};</span>

</code></pre></div></div> <p>假设这是一个线程安全的队列，empty函数是const的函数 不能修改内部成员，如果有锁，也就不能修改锁的状态，这样也就无法实现线程安全了。mutable可以实现这种情况。</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Queue</span> <span class="p">{</span>
<span class="nl">private:</span>
    <span class="k">mutable</span> <span class="n">std</span><span class="o">::</span><span class="n">mutex</span> <span class="n">mutex_</span><span class="p">;</span>
 <span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">push</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">);</span>
    <span class="kt">bool</span> <span class="n">empty</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">lock_guard</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">mutex</span><span class="o">&gt;</span> <span class="n">lk</span><span class="p">(</span><span class="n">mutex_</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

</code></pre></div></div> <p>还有一种情况使用mutable， 就是lambda函数：</p> <p>在 Lambda 表达式的设计中，捕获变量有几种方式；其中按值捕获（Caputre by Value）的方式不允许程序员在 Lambda 函数的函数体中修改捕获的变量。而以 mutable 修饰 Lambda 函数，则可以打破这种限制。</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">x</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="k">auto</span> <span class="n">f1</span> <span class="o">=</span> <span class="p">[</span><span class="o">=</span><span class="p">]()</span> <span class="k">mutable</span> <span class="p">{</span><span class="n">x</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;};</span>  <span class="c1">// okay, 创建了一个函数类型的实例</span>
<span class="k">auto</span> <span class="n">f2</span> <span class="o">=</span> <span class="p">[</span><span class="o">=</span><span class="p">]()</span>         <span class="p">{</span><span class="n">x</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;};</span>  <span class="c1">// error, 不允许修改按值捕获的外部变量的值</span>
</code></pre></div></div> <p>需要注意的是，上述 f1 的函数体中，虽然我们给 x 做了赋值操作，但是这一操作仅只在函数内部生效——即，实际是给拷贝至函数内部的 x 进行赋值——而外部的 x 的值依旧是 0。</p>]]></content><author><name></name></author><category term="programming"/><category term="c++"/><summary type="html"><![CDATA[简单解释一下c++中的 mutable关键字。]]></summary></entry><entry><title type="html">Tufte-style Jekyll blog</title><link href="https://damonsj.github.io/programming/2025/03/15/tufte-style-jekyll-blog.html" rel="alternate" type="text/html" title="Tufte-style Jekyll blog"/><published>2025-03-15T09:46:04+00:00</published><updated>2025-03-15T09:46:04+00:00</updated><id>https://damonsj.github.io/programming/2025/03/15/tufte-style-jekyll-blog</id><content type="html" xml:base="https://damonsj.github.io/programming/2025/03/15/tufte-style-jekyll-blog.html"><![CDATA[<p><span class="newthought">The Tufte Jekyll theme</span> is an attempt to create a website design with the look and feel of Edward Tufte’s books and handouts. Tufte’s style is known for its extensive use of sidenotes, tight integration of graphics with text, and well-set typography. The idea for this project is essentially cribbed wholesale from Tufte and R Markdown’s Tufte Handout format<label for="One" class="margin-toggle sidenote-number"></label><input type="checkbox" id="One" class="margin-toggle"/><span class="sidenote">See <a href="https://tufte-latex.github.io/tufte-latex/">tufte-latex.github.io/tufte-latex/</a> and <a href="http://rmarkdown.rstudio.com/tufte_handout_format.html">rmarkdown.rstudio.com/tufte_handout_format</a> </span> This page is an adaptation of the <a href="http://rmarkdown.rstudio.com/examples/tufte-handout.pdf">Tufte Handout PDF</a>.</p> <h2 id="jekyll-customizations">Jekyll customizations</h2> <p>This Jekyll blog theme is based on the github repository by Edward Tufte <a href="https://github.com/edwardtufte/tufte-css">here</a>, which was orginally created by Dave Leipmann, but is now labeled under Edward Tufte’s moniker. I borrowed freely from the Tufte-CSS repo and have transformed many of the typographic and page-structural features into a set of custom Liquid tags that make creating content using this style much easier than writing straight HTML. Essentially, if you know markdown, and mix in a few custom Liquid tags, you can be creating a website with this document style in short order.</p> <p>The remainder of this sample post is a self-documenting survey of the features of the Tufte-Jekyll theme. I have taken almost all of the sample content from the <a href="https://github.com/edwardtufte/tufte-css">Tufte-css</a> repo and embedded it here to illustrate the parity in appearence between the two. The additional verbiage and commentary I have added is to document the custom <em>Liquid</em> markup tags and other features that are bundled with this theme.</p> <h3 id="the-sass-settings-file">The SASS settings file</h3> <p>I have taken much of the actual <em>Tufte-css</em> files and modified them as necessary to accomodate the needs inherent in creating a Jekyll theme that has additional writing aids such as the Liquid tags. I have also turned the CSS file into a <a href="http://sass-lang.com">SASS</a> file (the .scss type). This means that you can alter things like font choices, text color, background color, and underlining style by changing values in this file. When the Jekyll site is built using <code class="language-plaintext highlighter-rouge">jekyll build</code> the settings in this file will be compiled into the customized CSS file that the site uses. If you don’t use SCSS or SASS, you are missing out on a huge productivity tool.</p> <p>This file looks like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/* This file contains all the constants for colors and font styles */

$body-font:   ETBembo, Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif;
// Note that Gill Sans is the top of the stack and corresponds to what is used in Tufte's books
// However, it is not a free font, so if it is not present on the computer that is viewing the webpage
// The free Google 'Lato' font is used instead. It is similar.
$sans-font:  "Gill Sans", "Gill Sans MT", "Lato", Calibri, sans-serif;
$code-font: Consolas, "Liberation Mono", Menlo, Courier, monospace;
$url-font: "Lucida Console", "Lucida Sans Typewriter", Monaco, "Bitstream Vera Sans Mono", monospace;
$text-color: #111;
$bg-color: #fffff8;
$contrast-color: #a00000;
$border-color: #333333;
$link-style: color; // choices are 'color' or 'underline'. Default is color using $contrast-color set above
</code></pre></div></div> <p>Any of these values can be changed in the <code class="language-plaintext highlighter-rouge">_sass/_settings.scss</code> file before the site is built. The default values are the ones from <em>tufte-css</em>.</p> <h2 id="fundamentals">Fundamentals</h2> <h3 id="color">Color</h3> <p>Although paper handouts obviously have a pure white background, the web is better served by the use of slightly off-white and off-black colors. I picked <code class="language-plaintext highlighter-rouge">#fffff8</code> and <code class="language-plaintext highlighter-rouge">#111111</code> because they are nearly indistinguishable from their ‘pure’ cousins, but dial down the harsh contrast. Tufte’s books are a study in spare, minimalist design. In his book <a href="http://www.edwardtufte.com/tufte/books_vdqi">The Visual Display of Quantitative Information</a>, he uses a red ink to add some visual punctuation to the buff colored paper and dark ink. In that spirit, links are styled using a similar red color.</p> <h3 id="headings">Headings</h3> <p>Tufte CSS uses <code class="language-plaintext highlighter-rouge">&lt;h1&gt;</code> for the document title, <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> with class <code class="language-plaintext highlighter-rouge">code</code> for the document subtitle, <code class="language-plaintext highlighter-rouge">&lt;h2&gt;</code> for section headings, and <code class="language-plaintext highlighter-rouge">&lt;h3&gt;</code> for low-level headings. More specific headings are not encouraged. If you feel the urge to reach for a heading of level 4 or greater, consider redesigning your document:</p> <blockquote> <p>[It is] notable that the Feynman lectures (3 volumes) write about all of physics in 1800 pages, using only 2 levels of hierarchical headings: chapters and A-level heads in the text. It also uses the methodology of <em>sentences</em> which then cumulate sequentially into <em>paragraphs</em>, rather than the grunts of bullet points. Undergraduate Caltech physics is very complicated material, but it didn’t require an elaborate hierarchy to organize.</p> </blockquote> <p><cite><a href="http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0000hB">http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0000hB</a></cite></p> <p>As a bonus, this excerpt regarding the use of headings provides an example of using block quotes. Markdown does not have a native <code class="language-plaintext highlighter-rouge">&lt;cite&gt;</code> shorthand, but real html can be sprinkled in with the Markdown text. In the previous example, the <code class="language-plaintext highlighter-rouge">&lt;cite&gt;</code> was preceded with a single return after the quotation itself. The previous blockquote was written in Markdown thusly:</p> <pre><code class="language-Liquid">[It is] notable that the Feynman lectures (3 volumes) write about all of physics in 1800 pages, using only 2 levels of hierarchical headings: chapters and A-level heads in the text. It also uses the methodology of *sentences* which then cumulate sequentially into *paragraphs*, rather than the grunts of bullet points. Undergraduate Caltech physics is very complicated material, but it didn’t require an elaborate hierarchy to organize.
&lt;cite&gt;[http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0000hB](http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0000hB)&lt;/cite&gt;
</code></pre> <p><span class="newthought">In his later books</span> <label for="two" class="margin-toggle sidenote-number"></label><input type="checkbox" id="two" class="margin-toggle"/><span class="sidenote"><a href="http://www.edwardtufte.com/tufte/books_be">http://www.edwardtufte.com/tufte/books_be</a> </span>, Tufte starts each section with a bit of vertical space, a non-indented paragraph, and sets the first few words of the sentence in small caps. To accomplish this using this style, enclose the sentence fragment you want styled with small caps in a custom Liquid tag called ‘newthought’ like so:</p> <pre><code class="language-Liquid">{% newthought 'In his later books' %}
</code></pre> <h3 id="text">Text</h3> <p>In print, Tufte uses the proprietary Monotype Bembo<label for="3" class="margin-toggle sidenote-number"></label><input type="checkbox" id="3" class="margin-toggle"/><span class="sidenote">See Tufte’s comment in the <a href="http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0000Vt">Tufte book fonts</a> thread. </span> font. A similar effect is achieved in digital formats with the now open-source ETBembo, which Tufte-Jekyll supplies with a <code class="language-plaintext highlighter-rouge">@font-face</code> reference to a .ttf file. Thanks to <a href="https://github.com/daveliepmann/tufte-css/commit/0a810a7d5f4707941c6f9fe99a53ec41f50a5c00">Linjie Ding</a>, italicized text uses the ETBembo Italic font instead of mechanically skewing the characters. In case ETBembo somehow doesn’t work, Tufte CSS degrades gracefully to other serif fonts like Palatino and Georgia. Notice that Tufte CSS includes separate font files for <strong>bold</strong> (strong) and <em>italic</em> (emphasis), instead of relying on the browser to mechanically transform the text. This is typographic best practice. It’s also really important. Thus concludes my unnecessary use of em and strong for the purpose of example.</p> <p>Code snippets ape GitHub’s font selection using Microsoft’s <a href="http://www.microsoft.com/typography/ClearTypeFonts.mspx"><em>Consolas</em></a> and the sans-serif font uses Tufte’s choice of Gill Sans. Since this is not a free font, and some systems will not have it installed, the free google font <a href="https://www.google.com/fonts/specimen/Lato"><em>Lato</em></a> is designated as a fallback.</p> <h3 id="lists">Lists</h3> <p>Tufte points out that while lists have valid uses, they tend to promote ineffective writing habits due to their “lack of syntactic and intellectual discipline”. He is particularly critical of hierarchical and bullet-pointed lists. So before reaching for an HTML list element, ask yourself:</p> <ul> <li>Does this list actually have to be represented using an HTML ul or ol element?</li> <li>Would my idea be better expressed as sentences in paragraphs?</li> <li>Is my message causally complex enough to warrant a flow diagram instead?</li> </ul> <p>This is but a small subset of a proper overview of the topic of lists in communication. A better way to understand Tufte’s thoughts on lists would be to read “The Cognitive Style of PowerPoint: Pitching Out Corrupts Within,” a chapter in Tufte’s book <em>Beautiful Evidence</em>, excerpted at some length by Tufte himself <a href="http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0002QF">on his website</a>. The whole piece is information-dense and therefore difficult to summarize. He speaks to web design specifically, but in terms of examples and principles rather than as a set of simple do-this, don’t-do-that prescriptions. It is well worth reading in full for that reason alone.</p> <p>For these reasons, Tufte CSS encourages caution before reaching for a list element, and by default removes the bullet points from unordered lists.</p> <h2 id="figures">Figures</h2> <h3 id="margin-figures">Margin Figures</h3> <p><label for="mf-id-1" class="margin-toggle">⊕</label><input type="checkbox" id="mf-id-1" class="margin-toggle"/><span class="marginnote"><img class="fullwidth" src="/assets/img/rhino.png"/><br/>F.J. Cole, “The History of Albrecht Dürer’s Rhinoceros in Zoological Literature,” <em>Science, Medicine, and History: Essays on the Evolution of Scientific Thought and Medical Practice</em> (London, 1953), ed. E. Ashworth Underwood, 337-356. From page 71 of Edward Tufte’s <em>Visual Explanations</em>.</span></p> <p>Images and graphics play an integral role in Tufte’s work. To place figures in the margin, use the custom margin figure liquid tag included in the <code class="language-plaintext highlighter-rouge">_plugins</code> directory like so:</p> <p><code class="language-plaintext highlighter-rouge">{% marginfigure 'mf-id-whatever' 'assets/img/rhino.png' 'F.J. Cole, “The History of Albrecht Dürer’s Rhinoceros in Zoological Literature,” *Science, Medicine, and History: Essays on the Evolution of Scientific Thought and Medical Practice* (London, 1953), ed. E. Ashworth Underwood, 337-356. From page 71 of Edward Tufte’s *Visual Explanations*.' %}</code>.</p> <p>Note that this tag has <em>three</em> parameters. The first is an arbitrary id. This parameter can be named anything as long as it is unique to this post. The second parameter is the path to the image. And the final parameter is whatever caption you want to be displayed with the figure. All parameters <em>must</em> be enclosed in quotes for this simple liquid tag to work!</p> <p>In this example, the <em>Liquid</em> marginfigure tag was inserted <em>before</em> the paragraph so that it aligns with the beginning of the paragraph. On small screens, the image will collapse into a small symbol: <span class="contrast ">⊕</span> at the location it has been inserted in the manuscript. Clicking on it will open the image.</p> <h2 id="sidenotes-and-margin-notes">Sidenotes and Margin notes</h2> <p>One of the most prominent and distinctive features of Tufte’s style is the extensive use of sidenotes and margin notes. Perhaps you have noticed their use in this document already. You are very astute.</p> <p>There is a wide margin to provide ample room for sidenotes and small figures. There exists a slight semantic distinction between <em>sidenotes</em> and <em>marginnotes</em>.</p> <h3 id="sidenotes">Sidenotes</h3> <p>Sidenotes<label for="sn-id-whatever" class="margin-toggle sidenote-number"></label><input type="checkbox" id="sn-id-whatever" class="margin-toggle"/><span class="sidenote">This is a sidenote and <em>displays a superscript</em> </span> display a superscript. The <em>sidenote</em> Liquid tag contains two components. The first is an identifier allowing the sidenote to be targeted by the twitchy index fingers of mobile device users so that all the yummy sidenote goodness is revealed when the superscript is tapped. The second components is the actual content of the sidenote. Both of these components should be enclosed in single quotes. Note that we are using the CSS ‘counter’ trick to automagically keep track of the number sequence on each page or post. On small screens, the sidenotes disappear and when the superscript is clicked, a side note will open below the content, which can then be closed with a similar click. Here is the markup for the sidenote at the beginning of this paragraph:</p> <p><code class="language-plaintext highlighter-rouge">{% sidenote 'sn-id-whatever' 'This is a sidenote and *displays a superscript*'%}</code></p> <h3 id="margin-notes">Margin notes</h3> <p>Margin notes<label for="mn-id-whatever" class="margin-toggle"> ⊕</label><input type="checkbox" id="mn-id-whatever" class="margin-toggle"/><span class="marginnote">This is a margin note <em>without</em> a superscript </span> are similar to sidenotes, but do not display a superscript. The <em>marginnnote</em> Liquid tags has the same two components as the <em>sidenote</em> tag. Anything can be placed in a margin note. Well, anything that is an inline element. Block level elements can make the Kramdown parser do strange things. On small screens, the margin notes disappear and this symbol: <span class="contrast ">⊕</span> pops up. When clicked, it will open the margin note below the content, which can then be closed with a similar click. The Markdown content has a similar sort of markup as a sidenote, but without a number involved:</p> <p><code class="language-plaintext highlighter-rouge">{% marginnote 'mn-id-whatever' 'This is a margin note *without* a superscript' %}</code></p> <h2 id="equations">Equations</h2> <p>The Markdown parser being used by this Jekyll theme is Kramdown, which contains some built-in <a href="//www.mathjax.org">Mathjax</a> support. Both inline and block-level mathematical figures can be added to the content.</p> <p>For instance, the following inline sequence:</p> <p><em>When \(a \ne 0\), there are two solutions to \(ax^2 + bx + c = 0\)</em></p> <p>is written by enclosing a Mathjax expression within <em>a matching pair of double dollar signs: <code class="language-plaintext highlighter-rouge">$$</code></em>:</p> <p><code class="language-plaintext highlighter-rouge">When $$ a \ne 0 $$, there are two solutions to $$ ax^2 + bx + c = 0 $$</code></p> <p>Similarly, this block-level Mathjax expression:</p> \[x = {-b \pm \sqrt{b^2-4ac} \over 2a}\] <p>is written by enclosing the expression within a pair of <code class="language-plaintext highlighter-rouge">$$</code> with an empty line above and below:</p> <p><code class="language-plaintext highlighter-rouge">$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a} $$</code></p> <p>You can get pretty fancy, for instance, the wave equation’s nabla is no big thing:</p> \[\frac{\partial^2 y}{\partial t^2}= c^2\nabla^2u\] <p>All of the standard <span class="latex">L<sup>a</sup>T<sub>e</sub>X</span> equation markup is available to use inside these block tags.</p> <p>Please note that the block-level Mathjax expressions <em>must</em> be on their own line, separated from content above and below the block by a blank line for the Kramdown parser and the Mathjax javascript to play nicely with one another.</p> <p>The Mathjax integration is tricky, and some things such as the inline matrix notation simply do not work well unless allowances are made for using the notation for a small matrix. Bottom line: If you are using this to document mathematics, be super careful to isolate your <span class="latex">L<sup>a</sup>T<sub>e</sub>X</span> blocks by blank lines!</p> <h2 id="tables">Tables</h2> <p>Tables are, frankly, a pain in the ass to create. That said, they often are one of the best methods for presenting data. Tabular data are normally presented with right-aligned numbers, left-aligned text, and minimal grid lines.</p> <p>Note that when writing Jekyll Markdown content, there will often be a need to get some dirt under your fingernails and stoop to writing a little honest-to-god html. Yes, all that hideous <code class="language-plaintext highlighter-rouge">&lt;table&gt;..&lt;thead&gt;..&lt;th&gt;</code> nonsense. <em>And</em> you must wrap the unholy mess in a <code class="language-plaintext highlighter-rouge">&lt;div class="table-wrapper"&gt;</code> tag to ensure that the table stays centered in the main content column.</p> <p>Tables are designed with an <code class="language-plaintext highlighter-rouge">overflow:scroll</code> property to create slider bars when the viewport is narrow. This is so that you do not collapse all your beautiful data into a jumble of letters and numbers when you view it on your smartphone.</p> <p><label for="table-1-id" class="margin-toggle"> ⊕</label><input type="checkbox" id="table-1-id" class="margin-toggle"/><span class="marginnote"><em>Table 1</em>: A table with default style formatting </span></p> <div class="table-wrapper"> <table class="table-alpha" id="newspaper-tone"> <thead> <tr> <th class="left">Content and tone of front-page articles in 94 U.S. newspapers, October and November, 1974</th> <th class="left">Number of articles</th> <th>Percent of articles with negative criticism of specific person or policy</th></tr> </thead> <tbody> <tr> <td class="text">Watergate: defendants and prosecutors, Ford’s pardon of Nixon</td> <td><div class="number">537</div></td> <td class="c"><div class="number">49%</div></td> </tr> <tr> <td class="text">Inflation, high cost of living</td> <td><div class="number">415</div></td> <td class="c"><div class="number">28%</div></td> </tr> <tr> <td class="text">Government competence: costs, quality, salaries of public employees</td> <td><div class="number">322</div></td> <td class="c"><div class="number">30%</div></td> </tr> <tr> <td class="text">Confidence in government: power of special interests, trust in political leaders, dishonesty in politics</td> <td><div class="number">266</div></td> <td class="c"><div class="number">52%</div></td> </tr> <tr> <td class="text">Government power: regulation of business, secrecy, control of CIA and FBI</td> <td><div class="number">154</div></td> <td class="c"><div class="number">42%</div></td> </tr> <tr> <td class="text">Crime</td> <td><div class="number">123</div></td> <td class="c"><div class="number r">30%</div></td> </tr> <tr> <td class="text">Race</td> <td><div class="number">103</div></td> <td class="c"><div class="number">25%</div></td> </tr> <tr> <td class="text">Unemployment</td> <td><div class="number">100</div></td> <td class="c"><div class="number">13%</div></td> </tr> <tr> <td class="text">Shortages: energy, food</td> <td><div class="number">68</div></td> <td class="c"><div class="number">16%</div></td> </tr> </tbody> </table> </div> <p>This is not the One True Table. Such a style does not exist. One must craft each data table with custom care to the narrative one is telling with that specific data. So take this not as “the table style to use”, but rather as “a table style to start from”. From here, use principles to guide you: avoid chartjunk, optimize the data-ink ratio (“within reason”, as Tufte says), and “mobilize every graphical element, perhaps several times over, to show the data.<label for="table-id" class="margin-toggle sidenote-number"></label><input type="checkbox" id="table-id" class="margin-toggle"/><span class="sidenote">Page 139, <em>The Visual Display of Quantitative Information</em>, Edward Tufte 2001. </span> Furthermore, one must know when to reach for more complex data presentation tools, like a custom graphic or a JavaScript charting library.</p> <p>As an example of alternative table styles, academic publications written in <span class="latex">L<sup>a</sup>T<sub>e</sub>X</span> often rely on the <code class="language-plaintext highlighter-rouge">booktabs</code> package to produce clean, clear tables. Similar results can be achieved in Tufte CSS with the <code class="language-plaintext highlighter-rouge">booktabs</code> class, as demonstrated in this table:</p> <p><label for="table-2-id" class="margin-toggle"> ⊕</label><input type="checkbox" id="table-2-id" class="margin-toggle"/><span class="marginnote"><em>Table 2</em>: A table with booktabs style formatting </span></p> <div class="table-wrapper"> <table class="booktabs"> <thead> <tr><th colspan="2" class="cmid">Items</th><th class="nocmid"></th></tr> <tr><th class="l">Animal</th><th>Description</th><th class="r">Price ($)</th></tr> </thead> <tbody> <tr><td>Gnat</td> <td>per gram</td><td class="r">13.65</td></tr> <tr><td></td> <td>each</td> <td class="r">0.01</td></tr> <tr><td>Gnu</td> <td>stuffed</td> <td class="r">92.50</td></tr> <tr><td>Emu</td> <td>stuffed</td> <td class="r">33.33</td></tr> <tr><td>Armadillo</td><td>frozen</td> <td class="r">8.99</td></tr> </tbody> </table> </div> <p>The table above was written in HTML as follows:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="table-wrapper"&gt;
&lt;table class="booktabs"&gt;
          &lt;thead&gt;
            &lt;tr&gt;&lt;th colspan="2" class="cmid"&gt;Items&lt;/th&gt;&lt;th class="nocmid"&gt;&lt;/th&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;th class="l"&gt;Animal&lt;/th&gt;&lt;th&gt;Description&lt;/th class="r"&gt;&lt;th&gt;Price ($)&lt;/th&gt;&lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;Gnat&lt;/td&gt;     &lt;td&gt;per gram&lt;/td&gt;&lt;td class="r"&gt;13.65&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;         &lt;td&gt;each&lt;/td&gt;    &lt;td class="r"&gt;0.01&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Gnu&lt;/td&gt;      &lt;td&gt;stuffed&lt;/td&gt; &lt;td class="r"&gt;92.50&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Emu&lt;/td&gt;      &lt;td&gt;stuffed&lt;/td&gt; &lt;td class="r"&gt;33.33&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;Armadillo&lt;/td&gt;&lt;td&gt;frozen&lt;/td&gt;  &lt;td class="r"&gt;8.99&lt;/td&gt;&lt;/tr&gt;
          &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</code></pre></div></div> <p><span class="newthought">I like this style of table,</span> so I have made it the default for unstyled tables. This allows use of the <a href="https://michelf.ca/projects/php-markdown/extra/"><em>Markdown Extra</em></a> features built into the <a href="http://kramdown.gettalong.org/parser/kramdown.html"><em>Kramdown</em></a> parser. Here is a table created using the Markdown Extra table syntax to make a nice table which has the side benefit of being human readable in the raw Markdown file:</p> <p><label for="tableID-3" class="margin-toggle"> ⊕</label><input type="checkbox" id="tableID-3" class="margin-toggle"/><span class="marginnote">Table 3: a table created with <em>Markdown Extra</em> markup using only the default table styling </span></p> <table> <thead> <tr> <th style="text-align: left"> </th> <th style="text-align: right">mpg</th> <th style="text-align: right">cyl</th> <th style="text-align: right">disp</th> <th style="text-align: right">hp</th> <th style="text-align: right">drat</th> <th style="text-align: right">wt</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Mazda RX4</td> <td style="text-align: right">21</td> <td style="text-align: right">6</td> <td style="text-align: right">160</td> <td style="text-align: right">110</td> <td style="text-align: right">3.90</td> <td style="text-align: right">2.62</td> </tr> <tr> <td style="text-align: left">Mazda RX4 Wag</td> <td style="text-align: right">21</td> <td style="text-align: right">6</td> <td style="text-align: right">160</td> <td style="text-align: right">110</td> <td style="text-align: right">3.90</td> <td style="text-align: right">2.88</td> </tr> <tr> <td style="text-align: left">Datsun 710</td> <td style="text-align: right">22.8</td> <td style="text-align: right">4</td> <td style="text-align: right">108</td> <td style="text-align: right">93</td> <td style="text-align: right">3.85</td> <td style="text-align: right">2.32</td> </tr> <tr> <td style="text-align: left">Hornet 4 Drive</td> <td style="text-align: right">21.4</td> <td style="text-align: right">6</td> <td style="text-align: right">258</td> <td style="text-align: right">110</td> <td style="text-align: right">3.08</td> <td style="text-align: right">3.21</td> </tr> <tr> <td style="text-align: left">Hornet Sportabout</td> <td style="text-align: right">18.7</td> <td style="text-align: right">8</td> <td style="text-align: right">360</td> <td style="text-align: right">175</td> <td style="text-align: right">3.15</td> <td style="text-align: right">3.44</td> </tr> <tr> <td style="text-align: left">Valiant</td> <td style="text-align: right">18.1</td> <td style="text-align: right">6</td> <td style="text-align: right">160</td> <td style="text-align: right">105</td> <td style="text-align: right">2.76</td> <td style="text-align: right">3.46</td> </tr> </tbody> </table> <p>Using the following Markdown formatting:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|                 |mpg  | cyl  |  disp  |   hp   |  drat  | wt  |
|:----------------|----:|-----:|-------:|-------:|-------:|----:|
|Mazda RX4        |21   |6     |160     |110     |3.90    |2.62 |
|Mazda RX4 Wag    |21   |6     |160     |110     |3.90    |2.88 |
|Datsun 710       |22.8 |4     |108     |93      |3.85    |2.32 |
etc...
</code></pre></div></div> <p>The following is a more simple table, showing the Markdown-style table markup. Remember to label the table with a <em>marginnote</em> Liquid tag, and you <em>must</em> separate the label from the table with a single blank line. This markup:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% marginnote 'Table-ID4' 'Table 4: a simple table showing left, center, and right alignment of table headings and data'  %}

|**Left** |**Center**|**Right**|
|:--------|:--------:|--------:|
 Aardvarks|         1|$3.50
       Cat|   5      |$4.23
  Dogs    |3         |$5.29
</code></pre></div></div> <p>Yields this table:</p> <p><label for="Table-ID4" class="margin-toggle"> ⊕</label><input type="checkbox" id="Table-ID4" class="margin-toggle"/><span class="marginnote">Table 4: a simple table showing left, center, and right alignment of table headings and data </span></p> <table> <thead> <tr> <th style="text-align: left"><strong>Left</strong></th> <th style="text-align: center"><strong>Center</strong></th> <th style="text-align: right"><strong>Right</strong></th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Aardvarks</td> <td style="text-align: center">1</td> <td style="text-align: right">$3.50</td> </tr> <tr> <td style="text-align: left">Cat</td> <td style="text-align: center">5</td> <td style="text-align: right">$4.23</td> </tr> <tr> <td style="text-align: left">Dogs</td> <td style="text-align: center">3</td> <td style="text-align: right">$5.29</td> </tr> </tbody> </table> <h2 id="code">Code</h2> <p>Code samples use a monospace font using the ‘code’ class. The Kramdown parser has the ‘GFM’ option enabled, which stands for ‘Github Flavored Markdown’, and this means that both inline code such as <code class="language-plaintext highlighter-rouge">#include &lt;stdio.h&gt;</code> and blocks of code can be delimited by surrounding them with 3 backticks:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(map tufte-style all-the-things)
</code></pre></div></div> <p>is created by the following markup:</p> <pre><code>```(map tufte-style all-the-things)```</code></pre> <p>To get the code highlighted in the language of your choice like so:</p> <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="nn">Jekyll</span>
  <span class="k">class</span> <span class="nc">RenderFullWidthTag</span> <span class="o">&lt;</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Tag</span>
  <span class="nb">require</span> <span class="s2">"shellwords"</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">tokens</span><span class="p">)</span>
      <span class="k">super</span>
      <span class="vi">@text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">shellsplit</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
      <span class="s2">"&lt;div&gt;&lt;img class='fullwidth' src='</span><span class="si">#{</span><span class="vi">@text</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">'/&gt;&lt;/div&gt; "</span> <span class="o">+</span>
      <span class="s2">"&lt;p&gt;&lt;span class='marginnote'&gt;</span><span class="si">#{</span><span class="vi">@text</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2">&lt;/span&gt;&lt;/p&gt;"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="p">.</span><span class="nf">register_tag</span><span class="p">(</span><span class="s1">'fullwidth'</span><span class="p">,</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">RenderFullWidthTag</span><span class="p">)</span>
</code></pre></div></div> <p>Enclose the code block in three backticks, followed by a space and then the language name, like this:</p> <pre> <code>``` ruby
    module Jekyll
    blah, blah...
   ```</code> </pre>]]></content><author><name></name></author><category term="programming"/><summary type="html"><![CDATA[The Tufte Jekyll theme is an attempt to create a website design with the look and feel of Edward Tufte’s books and handouts. Tufte’s style is known for its extensive use of sidenotes, tight integration of graphics with text, and well-set typography. The idea for this project is essentially cribbed wholesale from Tufte and R Markdown’s Tufte Handout formatSee tufte-latex.github.io/tufte-latex/ and rmarkdown.rstudio.com/tufte_handout_format This page is an adaptation of the Tufte Handout PDF.]]></summary></entry><entry><title type="html">c++中的 move 和 forward</title><link href="https://damonsj.github.io/programming/2025/03/08/move-forward.html" rel="alternate" type="text/html" title="c++中的 move 和 forward"/><published>2025-03-08T17:10:00+00:00</published><updated>2025-03-08T17:10:00+00:00</updated><id>https://damonsj.github.io/programming/2025/03/08/move-forward</id><content type="html" xml:base="https://damonsj.github.io/programming/2025/03/08/move-forward.html"><![CDATA[<h2 id="一左值和右值的区别">一、左值和右值的区别</h2> <p>直观意义上 左值是可以被赋值的，在内存中有独立的地址</p> <p>具体区别参考：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://www.cnblogs.com/gqtcgq/p/9828247.html

https://blog.csdn.net/zpznba/article/details/86028607
</code></pre></div></div> <h2 id="二-stdmove">二、 std::move</h2> <p>函数原型定义：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span> <span class="c1">// in namespace std</span>
<span class="k">typename</span> <span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;&amp;</span>
<span class="n">move</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">param</span><span class="p">)</span>
<span class="p">{</span>
<span class="k">using</span> <span class="n">ReturnType</span> <span class="o">=</span> <span class="c1">// alias declaration;</span>
<span class="k">typename</span> <span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;&amp;</span><span class="p">;</span> <span class="c1">// see Item 9</span>
<span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">ReturnType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">param</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>所以看出std::move只是对参数类型做了一个强制转换，转换为右值引用类型，std::move并不能移动任何东西，它唯一的功能是将一个左值强制转化为右值引用，继而可以通过右值引用使用该值，以用于移动语义。</p> <p>原型中的函数参数 T&amp;&amp; 是一个指向模板类型参数的右值引用，通过引用折叠，此参数可以与任何类型的实参匹配（可以传递左值或右值，这是std::move主要使用的两种场景）。关于引用折叠如下：</p> <p>方式一、</p> <p>X&amp; &amp;、X&amp;&amp; &amp;、X&amp; &amp;&amp;都折叠成X&amp;，用于处理左值</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span> <span class="nf">s</span><span class="p">(</span><span class="s">"hello"</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="o">&amp;&amp;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="err">折叠后</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="p">)</span>
<span class="err">此时：</span><span class="n">T</span><span class="err">的类型为</span><span class="n">string</span><span class="o">&amp;</span>
<span class="k">typename</span> <span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="err">为</span><span class="n">string</span>
<span class="err">整个</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="err">被实例化如下</span>
<span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">move</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="c1">//t为左值，移动后不能在使用t</span>
<span class="p">{</span>
<span class="c1">//通过static_cast将string&amp;强制转换为string&amp;&amp;</span>
<span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>方式二、</p> <p>X&amp;&amp; &amp;&amp;折叠成X&amp;&amp;，用于处理右值</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">string</span><span class="p">(</span><span class="s">"hello"</span><span class="p">))</span> <span class="o">=&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;&amp;</span><span class="p">)</span>
<span class="c1">//此时：T的类型为string</span>
<span class="c1">//  remove_reference&lt;T&gt;::type为string</span>
<span class="c1">//整个std::move被实例如下</span>
<span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">move</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="c1">//t为右值</span>
<span class="p">{</span>
   <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>  <span class="c1">//返回一个右值引用</span>
<span class="p">}</span>
</code></pre></div></div> <p>简单来说，右值经过T&amp;&amp;传递类型保持不变还是右值，而左值经过T&amp;&amp;变为普通的左值引用.</p> <p>参考</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> https://blog.csdn.net/p942005405/article/details/84644069

《Effective.Modern.C++-42.Specific.Ways.to.Improve.Your.Use.of.C++11.and.C++14-2014》 Item23
</code></pre></div></div> <h2 id="三-stdforward">三、 std::forward</h2> <p>大致原型为：</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span><span class="o">&lt;</span> <span class="k">typename</span> <span class="nc">T</span> <span class="p">&gt;</span> <span class="kr">inline</span>
<span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">forward</span><span class="p">(</span> <span class="k">typename</span> <span class="n">std</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;</span> <span class="n">t</span> <span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">template</span><span class="o">&lt;</span> <span class="k">typename</span> <span class="nc">T</span> <span class="p">&gt;</span> <span class="kr">inline</span>
<span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">forward</span><span class="p">(</span> <span class="k">typename</span> <span class="n">std</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;&amp;</span> <span class="n">t</span> <span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span>
    <span class="k">static_assert</span><span class="p">(</span><span class="o">!</span><span class="n">is_lvalue_reference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span> <span class="s">"bad forward call"</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div></div> <p>std::forward()实现完美转发，意思是当传入参数是左值时返回左值引用，传入参数是右值时返回右值引用。</p> <ul> <li>std::move执行到右值的无条件转换。就其本身而言，它没有move任何东西。</li> <li>std::forward只有在它的参数绑定到一个右值上的时候，它才转换它的参数到一个右值。</li> <li>std::move和std::forward只不过就是执行类型转换的两个函数；std::move没有move任何东西，std::forward没有转发任何东西。在运行期，它们没有做任何事情。它们没有产生需要执行的代码，一byte都没有。</li> <li>std::forward()不仅可以保持左值或者右值不变，同时还可以保持const、Lreference、Rreference、validate等属性不变； 一个输出的例子为：</li> </ul> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;utility&gt;</span><span class="cp">
</span>
<span class="k">struct</span> <span class="nc">A</span> <span class="p">{</span>
    <span class="n">A</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;&amp;</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"rvalue overload, n="</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span> <span class="p">}</span>
    <span class="n">A</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">n</span><span class="p">)</span>  <span class="p">{</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"lvalue overload, n="</span> <span class="o">&lt;&lt;</span> <span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">B</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T1</span><span class="p">,</span> <span class="k">class</span> <span class="nc">T2</span><span class="p">,</span> <span class="k">class</span> <span class="nc">T3</span><span class="p">&gt;</span>
    <span class="n">B</span><span class="p">(</span><span class="n">T1</span><span class="o">&amp;&amp;</span> <span class="n">t1</span><span class="p">,</span> <span class="n">T2</span><span class="o">&amp;&amp;</span> <span class="n">t2</span><span class="p">,</span> <span class="n">T3</span><span class="o">&amp;&amp;</span> <span class="n">t3</span><span class="p">)</span> <span class="o">:</span>
        <span class="n">a1_</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t1</span><span class="p">)},</span>
        <span class="n">a2_</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T2</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t2</span><span class="p">)},</span>
        <span class="n">a3_</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T3</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t3</span><span class="p">)}</span>
    <span class="p">{</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="n">A</span> <span class="n">a1_</span><span class="p">,</span> <span class="n">a2_</span><span class="p">,</span> <span class="n">a3_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">,</span> <span class="k">class</span> <span class="nc">U</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">make_unique1</span><span class="p">(</span><span class="n">U</span><span class="o">&amp;&amp;</span> <span class="n">u</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">T</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="n">u</span><span class="p">)));</span>
<span class="p">}</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">,</span> <span class="k">class</span><span class="o">...</span> <span class="nc">U</span><span class="p">&gt;</span>
<span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">make_unique2</span><span class="p">(</span><span class="n">U</span><span class="o">&amp;&amp;</span><span class="p">...</span> <span class="n">u</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">T</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="n">u</span><span class="p">)...));</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">auto</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">make_unique1</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">// rvalue</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">make_unique1</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="c1">// lvalue</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"B</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">make_unique2</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">Output</span><span class="o">:</span>

<span class="n">rvalue</span> <span class="n">overload</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span>
<span class="n">lvalue</span> <span class="n">overload</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span>
<span class="n">B</span>
<span class="n">rvalue</span> <span class="n">overload</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span>
<span class="n">lvalue</span> <span class="n">overload</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span>
<span class="n">rvalue</span> <span class="n">overload</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">3</span>

</code></pre></div></div> <p>参考</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://blog.csdn.net/guoxiaojie_415/article/details/79902278

https://www.cnblogs.com/boydfd/p/5182743.html

https://eli.thegreenplace.net/2014/perfect-forwarding-and-universal-references-in-c/
</code></pre></div></div>]]></content><author><name></name></author><category term="programming"/><category term="c++"/><summary type="html"><![CDATA[介绍c++中的move和forward的区别及各自的实现方式。]]></summary></entry></feed>